{
  "name": "Sphinx-configurator",
  "tagline": "Php library for parsing and editing sphinx.conf files",
  "body": "# sphinx-configurator\r\n\r\n[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/voksiv/sphinx-configurator/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/voksiv/sphinx-configurator/?branch=master)\r\n[![Build Status](https://scrutinizer-ci.com/g/voksiv/sphinx-configurator/badges/build.png?b=master)](https://scrutinizer-ci.com/g/voksiv/sphinx-configurator/build-status/master)\r\n[![License MIT](http://img.shields.io/badge/license-MIT-blue.svg?style=flat)](https://github.com/voksiv/sphinx-configurator/blob/master/LICENSE)\r\n\r\nPhp library for parsing and editing sphinx.conf files. pragmatically with high level abstraction\r\n\r\n## Installation\r\n\r\n```shell\r\ncomposer require voksiv/sphinx-configurator\r\n```\r\n\r\n## Usage\r\n```php\r\n<?php\r\n\r\nrequire 'vendor/autoload.php';\r\n\r\nuse LTDBeget\\sphinxConfigurator\\serializers\\ArraySerializer;\r\nuse LTDBeget\\sphinxConfigurator\\serializers\\JsonSerializer;\r\nuse LTDBeget\\sphinxConfigurator\\serializers\\PlainSerializer;\r\n\r\n$config_path  = \"path/to/your/config/file\";\r\n$plain_config = file_get_contents($config_path);\r\n\r\n// Parsing configuration to configuration file object\r\n$config = PlainSerializer::deserialize($plain_config);\r\n\r\n\r\n// check config\r\n$config->validate();\r\n\r\n// is has settings blocks\r\n$config->isHasCommon();\r\n$config->isHasIndexer();\r\n$config->isHasSearchd();\r\n\r\n// get settings block (create if don't exists)\r\n$common  = $config->getCommon();\r\n$indexer = $config->getIndexer();\r\n$searchd = $config->getSearchd();\r\n\r\n\r\n// work with common settings\r\n// get option appender, class that creates and appends all possible options for common\r\n$appender = $common->getOptionAppender();\r\n// example of option add\r\n$appender->addJsonAutoconvKeynames(\"option value\");\r\n\r\n// iterate via all options\r\nforeach($common->iterateOptions() as $option) {\r\n    // option data\r\n    $option->getName();\r\n    $option->getValue();\r\n\r\n    // modify value\r\n    $option->setValue(\"new value\");\r\n\r\n    // remove option from\r\n    $option->delete();\r\n}\r\n\r\n// work with indexer settings\r\n// get option appender, class that creates and appends all possible options for indexer\r\n$appender = $indexer->getOptionAppender();\r\n// example of option add\r\n$appender->addMaxFileFieldBuffer(\"option value\");\r\n\r\n// iterate via all options\r\nforeach($indexer->iterateOptions() as $option) {\r\n    // option data\r\n    $option->getName();\r\n    $option->getValue();\r\n\r\n    // modify value\r\n    $option->setValue(\"new value\");\r\n\r\n    // remove option from\r\n    $option->delete();\r\n}\r\n\r\n// work with searchd settings\r\n// get option appender, class that creates and appends all possible options for indexer\r\n$appender = $searchd->getOptionAppender();\r\n// example of option add\r\n$appender->addBinlogMaxLogSize(\"option value\");\r\n\r\n// iterate via all options\r\nforeach($searchd->iterateOptions() as $option) {\r\n    // option data\r\n    $option->getName();\r\n    $option->getValue();\r\n\r\n    // modify value\r\n    $option->setValue(\"new value\");\r\n\r\n    // remove option from\r\n    $option->delete();\r\n}\r\n\r\n// iterate via sources\r\nforeach($config->iterateSource() as $source) {\r\n    // source name\r\n    $source->getName();\r\n    // is has inheritance\r\n    if($source->isHasInheritance()) {\r\n        $source->getInheritanceName();\r\n    }\r\n\r\n    // get option appender, class that creates and appends all possible options for source\r\n    $appender = $source->getOptionAppender();\r\n    // example of option add\r\n    $appender->addHookPostIndex(\"option value\");\r\n\r\n\r\n    // iterate via all options\r\n    foreach($source->iterateOptions() as $option) {\r\n        // option data\r\n        $option->getName();\r\n        $option->getValue();\r\n\r\n        // modify value\r\n        $option->setValue(\"new value\");\r\n\r\n        // remove option from\r\n        $option->delete();\r\n    }\r\n}\r\n\r\n// iterate via indexes\r\nforeach($config->iterateIndex() as $index) {\r\n    // source name\r\n    $index->getName();\r\n    // is has inheritance\r\n    if($index->isHasInheritance()) {\r\n        $index->getInheritanceName();\r\n    }\r\n\r\n    // get option appender, class that creates and appends all possible options for index\r\n    $appender = $index->getOptionAppender();\r\n    // example of option add\r\n    $appender->addAgent(\"option value\");\r\n\r\n    // iterate via all options\r\n    foreach($index->iterateOptions() as $option) {\r\n        // option data\r\n        $option->getName();\r\n        $option->getValue();\r\n\r\n        // modify value\r\n        $option->setValue(\"new value\");\r\n\r\n        // remove option from\r\n        $option->delete();\r\n    }\r\n}\r\n\r\n// serialize object to plain configuration\r\n$plain_config = PlainSerializer::serialize($config);\r\n\r\n// serialize object to array\r\n$array_config = ArraySerializer::serialize($config);\r\n// deserialize array to object from array serialized configuration file \r\nArraySerializer::deserialize($array_config);\r\n\r\n// serialize object to json encoded string\r\n$json_config  = JsonSerializer::serialize($config);\r\n// deserialize json to object from json serialized configuration file\r\nJsonSerializer::deserialize($json_config);\r\n```\r\n\r\n## Docker\r\ninstall docker and docker-compose\r\n\r\nGo to docker \r\n```shell\r\ncd docker\r\n```\r\n\r\nBuild image\r\n```shell\r\ndocker-compose build\r\n```\r\n\r\nCheck concrete config from stubs directory via sphinx indextool\r\n```shell\r\ndocker-compose run --rm sphinx indextool --checkconfig -c /etc/sphinxsearch/valid.example.conf\r\n```\r\n\r\n## Regenerate documentation\r\n```shell\r\n$ ./vendor/bin/phpdox\r\n```\r\n\r\n## Notes\r\nlist of options was generated from docs of Sphinx 2.2.10-release \r\n[see manual](http://sphinxsearch.com/docs/current.html)\r\n\r\n## License\r\n\r\nsphinx-configurator is released under the MIT License.\r\nSee the [bundled LICENSE file](LICENSE) for details.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}