{
  "name": "Sphinx-configurator",
  "tagline": "Php library for parsing and editing sphinx.conf files",
  "body": "# sphinx-configurator\r\n\r\n[![Latest Stable Version](https://poser.pugx.org/ltd-beget/sphinx-configurator/version)](https://packagist.org/packages/ltd-beget/sphinx-configurator) \r\n[![Total Downloads](https://poser.pugx.org/ltd-beget/sphinx-configurator/downloads)](https://packagist.org/packages/ltd-beget/sphinx-configurator)\r\n[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/LTD-Beget/sphinx-configurator/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/LTD-Beget/sphinx-configurator/?branch=master)\r\n[![Code Coverage](https://scrutinizer-ci.com/g/LTD-Beget/sphinx-configurator/badges/coverage.png?b=master)](https://scrutinizer-ci.com/g/LTD-Beget/sphinx-configurator/?branch=master)\r\n[![Build Status](https://scrutinizer-ci.com/g/LTD-Beget/sphinx-configurator/badges/build.png?b=master)](https://scrutinizer-ci.com/g/LTD-Beget/sphinx-configurator/build-status/master)\r\n[![Documentation](https://img.shields.io/badge/code-documented-brightgreen.svg)](http://ltd-beget.github.io/sphinx-configurator/documentation/html/index.html)\r\n[![Documentation](https://img.shields.io/badge/code-coverage-brightgreen.svg)](http://ltd-beget.github.io/sphinx-configurator/coverage/)\r\n[![License MIT](http://img.shields.io/badge/license-MIT-blue.svg?style=flat)](https://github.com/LTD-Beget/sphinx-configurator/blob/master/LICENSE)\r\n\r\n\r\nPhp library for parsing and editing sphinx.conf files programmatically with high level abstraction.\r\n\r\n## Installation\r\n\r\n```shell\r\ncomposer require ltd-beget/sphinx-configurator\r\n```\r\n\r\n## Sphinx version\r\n\r\nThe library supports the following versions of sphinx:\r\n\r\n* [2.2.10](http://sphinxsearch.com/docs/current.html)\r\n* [2.2.8](http://sphinxsearch.com/docs/archives/manual-2.2.8.html)\r\n* [2.2.6](http://sphinxsearch.com/docs/archives/manual-2.2.6.html)\r\n* [2.2.5](http://sphinxsearch.com/docs/archives/manual-2.2.5.html)\r\n* [2.2.4](http://sphinxsearch.com/docs/archives/manual-2.2.4.html)\r\n* [2.2.3](http://sphinxsearch.com/docs/archives/manual-2.2.3.html)\r\n* [2.2.2](http://sphinxsearch.com/docs/archives/manual-2.2.2.html)\r\n* [2.2.1](http://sphinxsearch.com/docs/archives/manual-2.2.1.html)\r\n* [2.1.9](http://sphinxsearch.com/docs/archives/manual-2.1.9.html)\r\n* [2.1.8](http://sphinxsearch.com/docs/archives/manual-2.1.8.html)\r\n* [2.1.7](http://sphinxsearch.com/docs/archives/manual-2.1.7.html)\r\n* [2.1.6](http://sphinxsearch.com/docs/archives/manual-2.1.6.html)\r\n* [2.1.5](http://sphinxsearch.com/docs/archives/manual-2.1.5.html)\r\n* [2.1.4](http://sphinxsearch.com/docs/archives/manual-2.1.4.html)\r\n* [2.1.3](http://sphinxsearch.com/docs/archives/manual-2.1.3.html)\r\n* [2.1.2](http://sphinxsearch.com/docs/archives/manual-2.1.2.html)\r\n* [2.1.1](http://sphinxsearch.com/docs/archives/manual-2.1.1.html)\r\n\r\n## Usage\r\n\r\n### work with documentation informer\r\n\r\nThis class give you full information about concrete option.\r\nYou can use it separately if you need. \r\n\r\n```php\r\n<?php\r\n    require './vendor/autoload.php';\r\n    \r\n    use LTDBeget\\sphinx\\enums\\eSection;\r\n    use LTDBeget\\sphinx\\enums\\eVersion;\r\n    use LTDBeget\\sphinx\\enums\\options\\eIndexerOption;\r\n    use LTDBeget\\sphinx\\informer\\Informer;\r\n    \r\n    // chose version\r\n    $version = eVersion::V_2_2_10();\r\n    \r\n    // get options help informer\r\n    $informer = Informer::get($version);\r\n    \r\n    // chose section\r\n    $section = eSection::INDEXER();\r\n    \r\n    // check is known option type\r\n    // useful only for version 2.1.9 and lower for section common\r\n    $informer->isSectionExist($section); \r\n    \r\n    \r\n    // see all options info\r\n    foreach ($informer->iterateOptionInfo($section) as $optionInfo) {\r\n        $optionInfo->getName();\r\n        $optionInfo->getDescription();\r\n        $optionInfo->getDocLink();\r\n        $optionInfo->getVersion();\r\n        $optionInfo->getSection();\r\n        $optionInfo->isIsMultiValue();\r\n    }\r\n    \r\n    // concrete option\r\n    \r\n    $option = eIndexerOption::LEMMATIZER_CACHE();\r\n    // is option exist in current version\r\n    $informer->isKnownOption($section, $option);\r\n    \r\n    // is option permanently removed from newer version of Sphinx\r\n    $informer->isRemovedOption($section, $option);\r\n    \r\n    // see concrete option info\r\n    $optionInfo = $informer->getOptionInfo($section, $option);\r\n    $optionInfo->getName();\r\n    $optionInfo->getDescription();\r\n    $optionInfo->getDocLink();\r\n    $optionInfo->getVersion();\r\n    $optionInfo->getSection();\r\n    $optionInfo->isIsMultiValue();\r\n```\r\n\r\n### work with configuration object\r\n```php\r\n<?php\r\nrequire './vendor/autoload.php';\r\n\r\n    use LTDBeget\\sphinx\\configurator\\Configuration;\r\n    use LTDBeget\\sphinx\\enums\\eVersion;\r\n    use LTDBeget\\sphinx\\enums\\options\\eIndexOption;\r\n    use LTDBeget\\sphinx\\enums\\options\\eSearchdOption;\r\n    use LTDBeget\\sphinx\\enums\\options\\eSourceOption;\r\n    \r\n    // chose version\r\n    $version = eVersion::V_2_2_10();\r\n    \r\n    // get content of your configuration file\r\n    $path_to_configuration = __DIR__. '/sphinx/conf/valid.example.conf';\r\n    $content = file_get_contents($path_to_configuration);\r\n    \r\n    \r\n    // create object from string\r\n    // if your configuration is valid it will be deserialized into the object\r\n    // note that if your configuration has options which \r\n    // was permanently removed from newer versions of sphinx\r\n    // they will be ignored\r\n    $configuration = Configuration::fromString($content, $version);\r\n    \r\n    // if you want, you can store the configuration in different formats\r\n    $as_array = $configuration->toArray();\r\n    $as_json  = $configuration->toJson();\r\n    \r\n    // if you need to make sphinx conf file content cast object to string\r\n    $as_plain = (string) $configuration;\r\n    \r\n    // configuration object serialized as array or json can be deserialized\r\n    $configuration = Configuration::fromArray($as_array, $version);\r\n    $configuration = Configuration::fromJson($as_json, $version);\r\n    \r\n    // or you can create empty object and fill it yourself\r\n    $configuration = new Configuration($version);\r\n    \r\n    // adding source sections\r\n    $source = $configuration->addSource('source1');\r\n    $source->addOption(eSourceOption::TYPE(), 'mysql');\r\n    \r\n    $source = $configuration->addSource('source2', 'source1');\r\n    $source->addOption(eSourceOption::TYPE(), 'pgsql');\r\n    \r\n    // is section has inheritance\r\n    $source->isHasInheritance();\r\n    \r\n    // get parent section object\r\n    $source->getInheritance();\r\n    \r\n    // note that sphinx has multi value options (MVA)\r\n    // if you add twice or more times MVA option each time new option wil added\r\n    $source->addOption(eSourceOption::XMLPIPE_ATTR_MULTI_64(), '1234567890');\r\n    $source->addOption(eSourceOption::XMLPIPE_ATTR_MULTI_64(), '0987654321');\r\n    \r\n    // but if you add not MVA option twice, newer option erases older\r\n    $source->addOption(eSourceOption::CSVPIPE_DELIMITER(), '|'); // will be erased\r\n    $source->addOption(eSourceOption::CSVPIPE_DELIMITER(), '.'); // this is set in configuration\r\n    \r\n    // adding index sections\r\n    $source = $configuration->addIndex('index1');\r\n    $source->addOption(eIndexOption::SOURCE(), 'source1');\r\n    \r\n    $source = $configuration->addIndex('index2', 'index1');\r\n    $source->addOption(eIndexOption::SOURCE(), 'source2');\r\n    \r\n    // check is has settings sections\r\n    $configuration->isHasCommon();\r\n    $configuration->isHasSearchd();\r\n    $configuration->isHasIndexer();\r\n    \r\n    // get settings section (it will be created if doesn't exists)\r\n    $searchd = $configuration->getSearchd();\r\n    \r\n    // add option to settings\r\n    $searchd->addOption(eSearchdOption::LISTEN(), '9312');\r\n    \r\n    // for indexer and common work is same\r\n    $indexer = $configuration->getIndexer();\r\n    $common  = $configuration->getCommon();\r\n    \r\n    // each section can be deleted.\r\n    // note, if you delete section that is parent to some one, its child will be removed too.\r\n    $common->delete();\r\n    \r\n    \r\n    // iterating and manipulation with options\r\n    \r\n    // index and source is multiple sections\r\n    // for iterating via it use iterateSource() or iterateIndex()\r\n    foreach($configuration->iterateSource() as $section) {\r\n        foreach ($section->iterateOptions() as $option) {\r\n            $option->getInfo();\r\n            $option->getName();\r\n            $option->getValue();\r\n    \r\n            if($option->getValue() === 'pgsql' && $option->getName()->is(eSourceOption::TYPE())) {\r\n                $option->delete();\r\n            }\r\n    \r\n            if($option->getValue() === 'mysql' && $option->getName()->is(eSourceOption::TYPE())) {\r\n                $option->setValue('pgsql');\r\n            }\r\n        }\r\n    }\r\n    \r\n    // searchd, indexer and common is single section\r\n    // so iterate via options like this\r\n    foreach($configuration->getIndexer()->iterateOptions() as $option) {\r\n        $option->getInfo();\r\n        $option->getName();\r\n        $option->getValue();\r\n    }\r\n    \r\n    // and now, cast to string and see your brilliant configuration ;)\r\n    echo $configuration;\r\n```\r\n\r\n### Sphinx configuration tokenize only\r\nif you want only tokenize sphinx configuration you can use this [library](https://github.com/LTD-Beget/sphinx-configuration-tokenizer) \r\n\r\n\r\n### Developers\r\n\r\n## Docker\r\ninstall docker and docker-compose\r\n\r\nGo to docker \r\n```shell\r\ncd docker\r\n```\r\n\r\nBuild image\r\n```shell\r\ndocker-compose build\r\n```\r\n\r\nCheck concrete config from stubs directory via sphinx indextool\r\n```shell\r\ndocker-compose run --rm sphinx indextool --checkconfig -c /etc/sphinxsearch/valid.example.conf\r\n```\r\n\r\n## Regenerate documentation\r\n```shell\r\n$ ./vendor/bin/phpdox\r\n```\r\n\r\n### Run tests\r\n\r\n```shell\r\n$ php phpunit.phar --coverage-html coverage\r\n```\r\n\r\n## License\r\n\r\nsphinx-configurator is released under the MIT License.\r\nSee the [bundled LICENSE file](LICENSE) for details.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}